"""
Generated test for: RegistrationForm.jsx
Test type: integration
Generated by QA Analyzer AI Agent
"""

import pytest
from playwright.async_api import async_playwright, expect
import asyncio


class TestRegistrationformIntegration:
    """Test class for RegistrationForm.jsx"""
    
    @pytest.mark.asyncio
    async def test_RegistrationForm_integration(self):
        """
        Main test method for integration testing
        Generated from AI analysis of RegistrationForm.jsx
        """
        async with async_playwright() as p:
            # Launch browser (headless for CI/CD)
            browser = await p.chromium.launch(
                headless=True,
                args=["--no-sandbox", "--disable-dev-shm-usage"]
            )
            
            # Create new page
            page = await browser.new_page()
            
            try:
                # Execute generated actions
    await page.goto("http://localhost:3000")
    await page.wait_for_load_state("networkidle")
    await expect(page.locator("form, input, textarea")).to_be_visible()
    await expect(page.locator("form, input, textarea")).to_be_visible()
    await expect(page.locator("form, input, textarea")).to_be_visible()
    await expect(page.locator("form, input, textarea")).to_be_visible()
    await expect(page.locator("form, input, textarea")).to_be_visible()
    await page.click("button[type='submit'], input[type='submit'], button, .btn, [role='button']")
    await page.click("button[type='submit'], input[type='submit'], button, .btn, [role='button']")
    await page.click("button[type='submit'], input[type='submit'], button, .btn, [role='button']")
    await expect(page.locator(".success, [role='status']")).to_contain_text("Registration successful!")
    await expect(page.locator(".success, [role='status']")).to_contain_text("Registration successful!")
    await expect(page.locator("main, .main, #main, .content")).to_be_visible()
    await expect(page.locator(".error, [role='alert']")).to_contain_text("Error")
    await expect(page.locator(".error, [role='alert']")).to_contain_text("Error")
    await expect(page.locator("main, .main, #main, .content")).to_be_visible()
    await expect(page.locator(".error, [role='alert']")).to_contain_text("Error")
    await expect(page.locator("#username, input#username, input[name='username']")).to_contain_text("")
    await expect(page.locator("#email, input#email, input[name='email']")).to_contain_text("")
    await expect(page.locator("#password, input#password, input[name='password']")).to_contain_text("")
    await expect(page.locator("#confirmPassword, input#confirmPassword, input[name='confirmPassword']")).to_contain_text("")
    await expect(page.locator("main, .main, #main, .content")).to_be_visible()
    await page.screenshot(path="results/test_RegistrationForm_integration.png")
                
                # Additional assertions
                await expect(page).to_have_title(lambda title: len(title) > 0)
                
                print(f"✅ Test test_RegistrationForm_integration completed successfully")
                
            except Exception as e:
                # Take screenshot on failure
                await page.screenshot(path=f"results/test_RegistrationForm_integration_failure.png")
                print(f"❌ Test test_RegistrationForm_integration failed: {str(e)}")
                raise
                
            finally:
                await browser.close()


if __name__ == "__main__":
    # Run the test directly
    asyncio.run(TestRegistrationformIntegration.test_RegistrationForm_integration(TestRegistrationformIntegration()))
